# Generated by Django 5.1.6 on 2025-04-03 03:51

from django.db import migrations
from django.utils import timezone
from django.contrib.auth.hashers import make_password
import datetime


def create_test_data(apps, schema_editor):
    # Get models
    User = apps.get_model('auth', 'User')
    UserProfile = apps.get_model('home', 'UserProfile')
    Organization = apps.get_model('home', 'Organization')
    UserOrganization = apps.get_model('home', 'UserOrganization')
    Building = apps.get_model('home', 'Building')
    HRPersonnel = apps.get_model('home', 'HRPersonnel')
    Room = apps.get_model('home', 'Room')
    Equipment = apps.get_model('home', 'Equipment')
    Booking = apps.get_model('home', 'Booking')
    BookingEquipment = apps.get_model('home', 'BookingEquipment')
    Notification = apps.get_model('home', 'Notification')
    
    # Create or get admin user
    admin_user, admin_created = User.objects.get_or_create(
        username='admin',
        defaults={
            'email': 'admin@example.com',
            'password': make_password('admin123'),
            'first_name': 'Admin',
            'last_name': 'User',
            'is_staff': True,
            'is_superuser': True
        }
    )
    
    admin_profile, _ = UserProfile.objects.get_or_create(
        user=admin_user,
        defaults={
            'role': 'ADMIN',
            'phone': '1234567890'
        }
    )
    
    # Create faculty users
    faculty1, _ = User.objects.get_or_create(
        username='faculty1',
        defaults={
            'email': 'faculty1@example.com',
            'password': make_password('faculty123'),
            'first_name': 'John',
            'last_name': 'Smith'
        }
    )
    
    faculty1_profile, _ = UserProfile.objects.get_or_create(
        user=faculty1,
        defaults={
            'role': 'FACULTY',
            'phone': '2345678901'
        }
    )
    
    faculty2, _ = User.objects.get_or_create(
        username='faculty2',
        defaults={
            'email': 'faculty2@example.com',
            'password': make_password('faculty123'),
            'first_name': 'Jane',
            'last_name': 'Doe'
        }
    )
    
    faculty2_profile, _ = UserProfile.objects.get_or_create(
        user=faculty2,
        defaults={
            'role': 'FACULTY',
            'phone': '3456789012'
        }
    )
    
    # Create student users
    student1, _ = User.objects.get_or_create(
        username='student1',
        defaults={
            'email': 'student1@example.com',
            'password': make_password('student123'),
            'first_name': 'Alice',
            'last_name': 'Johnson'
        }
    )
    
    student1_profile, _ = UserProfile.objects.get_or_create(
        user=student1,
        defaults={
            'role': 'STUDENT',
            'phone': '4567890123'
        }
    )
    
    student2, _ = User.objects.get_or_create(
        username='student2',
        defaults={
            'email': 'student2@example.com',
            'password': make_password('student123'),
            'first_name': 'Bob',
            'last_name': 'Brown'
        }
    )
    
    student2_profile, _ = UserProfile.objects.get_or_create(
        user=student2,
        defaults={
            'role': 'STUDENT',
            'phone': '5678901234'
        }
    )
    
    # Create organizations
    org_admin, _ = Organization.objects.get_or_create(
        name='Campus Administration',
        defaults={
            'type': 'ADMIN',
            'description': 'Main campus administration'
        }
    )
    
    org_dept1, _ = Organization.objects.get_or_create(
        name='Computer Science Department',
        defaults={
            'type': 'DEPARTMENT',
            'description': 'Department of Computer Science and Engineering'
        }
    )
    
    org_dept2, _ = Organization.objects.get_or_create(
        name='Electrical Engineering Department',
        defaults={
            'type': 'DEPARTMENT',
            'description': 'Department of Electrical Engineering'
        }
    )
    
    org_club1, _ = Organization.objects.get_or_create(
        name='Coding Club',
        defaults={
            'type': 'CLUB',
            'description': 'Student coding and programming club'
        }
    )
    
    org_club2, _ = Organization.objects.get_or_create(
        name='Robotics Club',
        defaults={
            'type': 'CLUB',
            'description': 'Student robotics and automation club'
        }
    )
    
    # Associate users with organizations
    UserOrganization.objects.create(
        user=admin_profile,
        organization=org_admin,
        level=3  # Leader
    )
    
    UserOrganization.objects.create(
        user=faculty1_profile,
        organization=org_dept1,
        level=3  # Leader
    )
    
    UserOrganization.objects.create(
        user=faculty1_profile,
        organization=org_club1,
        level=3  # Leader
    )
    
    UserOrganization.objects.create(
        user=faculty2_profile,
        organization=org_dept2,
        level=3  # Leader
    )
    
    UserOrganization.objects.create(
        user=faculty2_profile,
        organization=org_club2,
        level=3  # Leader
    )
    
    UserOrganization.objects.create(
        user=student1_profile,
        organization=org_club1,
        level=2  # Representative
    )
    
    UserOrganization.objects.create(
        user=student2_profile,
        organization=org_club2,
        level=2  # Representative
    )
    
    # Create buildings
    building1, _ = Building.objects.get_or_create(
        name='Main Building',
        defaults={
            'location': 'Central Campus'
        }
    )
    
    building2, _ = Building.objects.get_or_create(
        name='Science Complex',
        defaults={
            'location': 'North Campus'
        }
    )
    
    building3, _ = Building.objects.get_or_create(
        name='Engineering Block',
        defaults={
            'location': 'South Campus'
        }
    )
    
    # Create HR personnel
    hr1, _ = HRPersonnel.objects.get_or_create(
        name='Tech Support',
        defaults={
            'email': 'tech@example.com',
            'phone': '6789012345',
            'hr_type': 'TECHNICIAN'
        }
    )
    
    hr2, _ = HRPersonnel.objects.get_or_create(
        name='Cleaning Staff',
        defaults={
            'email': 'cleaning@example.com',
            'phone': '7890123456',
            'hr_type': 'CLEANER'
        }
    )
    
    hr3, _ = HRPersonnel.objects.get_or_create(
        name='Security Team',
        defaults={
            'email': 'security@example.com',
            'phone': '8901234567',
            'hr_type': 'SECURITY'
        }
    )
    
    # Create rooms
    room1, _ = Room.objects.get_or_create(
        name='Lecture Hall 101',
        defaults={
            'description': 'Large lecture hall with projector and sound system',
            'image_url': 'https://images.unsplash.com/photo-1517164850305-99a3e65bb47e',
            'status': 'AVAILABLE',
            'hr_responsible': hr1,
            'building': building1,
            'room_type': 'LECTURE_HALL',
            'capacity': 200,
            'floor': 1,
            'room_number': '101'
        }
    )
    
    room2, _ = Room.objects.get_or_create(
        name='Seminar Room 201',
        defaults={
            'description': 'Medium-sized seminar room for presentations',
            'image_url': 'https://images.unsplash.com/photo-1522071820081-009f0129c71c',
            'status': 'AVAILABLE',
            'hr_responsible': hr1,
            'building': building1,
            'room_type': 'SEMINAR_ROOM',
            'capacity': 50,
            'floor': 2,
            'room_number': '201'
        }
    )
    
    room3, _ = Room.objects.get_or_create(
        name='Computer Lab 301',
        defaults={
            'description': 'Computer laboratory with 30 workstations',
            'image_url': 'https://images.unsplash.com/photo-1504384308090-c894fdcc538d',
            'status': 'AVAILABLE',
            'hr_responsible': hr1,
            'building': building2,
            'room_type': 'LAB',
            'capacity': 30,
            'floor': 3,
            'room_number': '301'
        }
    )
    
    room4, _ = Room.objects.get_or_create(
        name='Conference Room 401',
        defaults={
            'description': 'Small conference room for meetings',
            'image_url': 'https://images.unsplash.com/photo-1517502884422-41eaead166d4',
            'status': 'AVAILABLE',
            'hr_responsible': hr2,
            'building': building3,
            'room_type': 'CONFERENCE_ROOM',
            'capacity': 15,
            'floor': 4,
            'room_number': '401'
        }
    )
    
    room5, _ = Room.objects.get_or_create(
        name='Classroom 501',
        defaults={
            'description': 'Standard classroom with whiteboard',
            'image_url': 'https://images.unsplash.com/photo-1580582932707-520aed937b7b',
            'status': 'AVAILABLE',
            'hr_responsible': hr2,
            'building': building3,
            'room_type': 'CLASSROOM',
            'capacity': 40,
            'floor': 5,
            'room_number': '501'
        }
    )
    
    # Create equipment
    equipment1 = Equipment.objects.create(
        name='Projector HD1080',
        description='High-definition projector for presentations',
        image_url='https://images.unsplash.com/photo-1533619043865-1c2e2f32ff75',
        status='AVAILABLE',
        hr_responsible=hr1,
        building=building1,
        equipment_type='PROJECTOR',
        model_number='HD1080',
        quantity=5
    )
    
    equipment2 = Equipment.objects.create(
        name='Wireless Microphone',
        description='Wireless microphone system for lectures',
        image_url='https://images.unsplash.com/photo-1520170350707-b2da59970118',
        status='AVAILABLE',
        hr_responsible=hr1,
        building=building1,
        equipment_type='MICROPHONE',
        model_number='WM200',
        quantity=10
    )
    
    equipment3 = Equipment.objects.create(
        name='Laptop Dell XPS',
        description='Dell XPS laptops for presentations',
        image_url='https://images.unsplash.com/photo-1588872657578-7efd1f1555ed',
        status='AVAILABLE',
        hr_responsible=hr1,
        building=building2,
        equipment_type='PC',
        model_number='XPS15',
        quantity=8
    )
    
    equipment4 = Equipment.objects.create(
        name='Portable Speaker',
        description='Portable Bluetooth speakers',
        image_url='https://images.unsplash.com/photo-1545454675-3531b543be5d',
        status='AVAILABLE',
        hr_responsible=hr1,
        building=building3,
        equipment_type='SPEAKER',
        model_number='BT500',
        quantity=6
    )
    
    # Associate equipment with rooms
    equipment1.rooms.add(room1, room2)
    equipment2.rooms.add(room1)
    equipment3.rooms.add(room3)
    equipment4.rooms.add(room4, room5)
    
    # Create bookings
    # Current time for reference
    now = timezone.now()
    
    # Approved booking in the past
    past_booking = Booking.objects.create(
        user=faculty1,
        organization=org_dept1,
        room=room1,
        title='Department Meeting',
        description='Monthly department meeting',
        start_time=now - datetime.timedelta(days=7, hours=2),
        end_time=now - datetime.timedelta(days=7),
        status='COMPLETED',
        created_at=now - datetime.timedelta(days=14),
        updated_at=now - datetime.timedelta(days=14),
        approved_by=admin_user
    )
    
    # Approved booking for today
    today_booking = Booking.objects.create(
        user=faculty2,
        organization=org_dept2,
        room=room2,
        title='Guest Lecture',
        description='Special guest lecture on AI',
        start_time=now + datetime.timedelta(hours=1),
        end_time=now + datetime.timedelta(hours=3),
        status='APPROVED',
        created_at=now - datetime.timedelta(days=3),
        updated_at=now - datetime.timedelta(days=2),
        approved_by=admin_user
    )
    
    # Approved booking for future
    future_booking = Booking.objects.create(
        user=faculty1,
        organization=org_club1,
        room=room3,
        title='Coding Workshop',
        description='Python programming workshop for beginners',
        start_time=now + datetime.timedelta(days=3),
        end_time=now + datetime.timedelta(days=3, hours=2),
        status='APPROVED',
        created_at=now - datetime.timedelta(days=5),
        updated_at=now - datetime.timedelta(days=4),
        approved_by=admin_user
    )
    
    # Pending booking
    pending_booking1 = Booking.objects.create(
        user=student1,
        organization=org_club1,
        room=room4,
        title='Project Meeting',
        description='Team meeting for semester project',
        start_time=now + datetime.timedelta(days=5),
        end_time=now + datetime.timedelta(days=5, hours=1),
        status='PENDING',
        created_at=now - datetime.timedelta(hours=5),
        updated_at=now - datetime.timedelta(hours=5)
    )
    
    # Another pending booking
    pending_booking2 = Booking.objects.create(
        user=student2,
        organization=org_club2,
        room=room5,
        title='Robotics Demo',
        description='Demonstration of new robotics project',
        start_time=now + datetime.timedelta(days=7),
        end_time=now + datetime.timedelta(days=7, hours=2),
        status='PENDING',
        created_at=now - datetime.timedelta(hours=3),
        updated_at=now - datetime.timedelta(hours=3)
    )
    
    # Rejected booking
    rejected_booking = Booking.objects.create(
        user=student1,
        organization=org_club1,
        room=room1,
        title='Study Group',
        description='Final exam preparation',
        start_time=now + datetime.timedelta(days=2),
        end_time=now + datetime.timedelta(days=2, hours=3),
        status='REJECTED',
        created_at=now - datetime.timedelta(days=1),
        updated_at=now - datetime.timedelta(hours=12),
        approved_by=faculty1,
        rejected_reason='Room already booked for another event'
    )
    
    # Associate equipment with bookings
    BookingEquipment.objects.create(
        booking=today_booking,
        equipment=equipment1,
        quantity=1
    )
    
    BookingEquipment.objects.create(
        booking=today_booking,
        equipment=equipment2,
        quantity=2
    )
    
    BookingEquipment.objects.create(
        booking=future_booking,
        equipment=equipment3,
        quantity=5
    )
    
    BookingEquipment.objects.create(
        booking=pending_booking1,
        equipment=equipment4,
        quantity=1
    )
    
    # Create notifications
    # For faculty1
    Notification.objects.create(
        user=faculty1,
        title='New Booking Request',
        message=f'A new booking request for {room4.name} has been submitted by {student1.username} and needs your approval.',
        notification_type='BOOKING_CREATED',
        created_at=now - datetime.timedelta(hours=5),
        read=False,
        booking=pending_booking1
    )
    
    # For faculty2
    Notification.objects.create(
        user=faculty2,
        title='New Booking Request',
        message=f'A new booking request for {room5.name} has been submitted by {student2.username} and needs your approval.',
        notification_type='BOOKING_CREATED',
        created_at=now - datetime.timedelta(hours=3),
        read=False,
        booking=pending_booking2
    )
    
    # For student1
    Notification.objects.create(
        user=student1,
        title='Booking Request Submitted',
        message=f'Your booking request for {room4.name} has been submitted and is pending approval.',
        notification_type='BOOKING_CREATED',
        created_at=now - datetime.timedelta(hours=5),
        read=True,
        booking=pending_booking1
    )
    
    Notification.objects.create(
        user=student1,
        title='Booking Rejected',
        message=f'Your booking request for {room1.name} has been rejected. Reason: Room already booked for another event',
        notification_type='BOOKING_REJECTED',
        created_at=now - datetime.timedelta(hours=12),
        read=False,
        booking=rejected_booking
    )
    
    # For student2
    Notification.objects.create(
        user=student2,
        title='Booking Request Submitted',
        message=f'Your booking request for {room5.name} has been submitted and is pending approval.',
        notification_type='BOOKING_CREATED',
        created_at=now - datetime.timedelta(hours=3),
        read=True,
        booking=pending_booking2
    )


class Migration(migrations.Migration):

    dependencies = [
        ('home', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_test_data),
    ]
